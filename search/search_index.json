{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"RBACLens","text":"<p>RBACLens is a powerful CLI tool for auditing and analyzing Kubernetes RBAC (Role-Based Access Control) resources. It helps cluster administrators and security teams identify risky RBAC configurations, visualize permissions, and ensure best practices are followed.</p> <p>Note</p> <p>RBACLens is also great for anyone learning about Kubernetes RBAC rules!</p>"},{"location":"#features","title":"Features","text":"<ul> <li> Fetch RBAC resources: Retrieve Roles, ClusterRoles, RoleBindings, and ClusterRoleBindings from a Kubernetes cluster and save them to a JSON file for offline analysis.</li> <li> Audit for risky configurations: Analyze RBAC resources using built-in rules to detect overly permissive or dangerous settings.</li> <li> Flexible input: Audit live from a cluster or from previously saved JSON files.</li> </ul>"},{"location":"#installation","title":"Installation","text":"Pre-built Binary (Recommended)Install via GoBuild from Source <ol> <li>Go to the GitHub Releases page</li> <li>Download the appropriate binary for your OS and architecture.</li> <li>Move the binary to a directory in your <code>PATH</code> (e.g., <code>~/bin</code>, <code>~/.local/bin</code>, or <code>/usr/local/bin</code>).</li> <li>(Optional) Rename the binary to <code>rbaclens</code> for convenience. This makes it easier to run the tool from the terminal.</li> </ol> LinuxmacOSWindows (PowerShell) <pre><code>mv RBACLens-linux-amd64 ~/bin/rbaclens\nchmod +x ~/bin/rbaclens\n</code></pre> <pre><code>mv RBACLens-darwin-amd64 /usr/local/bin/rbaclens\nchmod +x /usr/local/bin/rbaclens\n</code></pre> <pre><code>Rename-Item -Path .\\RBACLens-windows-amd64.exe -NewName rbaclens.exe\nMove-Item -Path .\\rbaclens.exe -Destination $env:USERPROFILE\\bin\\rbaclens.exe\n</code></pre> <p>Tip</p> <p>You can rename the binary to <code>rbaclens</code> (lowercase) for convenience, and ensure the directory is in your <code>PATH</code> so you can run <code>rbaclens</code> from anywhere.</p> <pre><code>go install github.com/flushthemoney/RBACLens@latest\n</code></pre> <p>Ensure <code>$HOME/go/bin</code> is in your <code>PATH</code>.</p> Fish shellBash / ZshSymlink for Convenience <pre><code>set -U fish_user_paths $fish_user_paths $HOME/go/bin\n</code></pre> <p>Add this to your <code>~/.bashrc</code> or <code>~/.zshrc</code>:</p> <pre><code>export PATH=\"$PATH:$HOME/go/bin\"\n</code></pre> <p>If the binary is named <code>RBACLens</code>, you may want to symlink it to <code>rbaclens</code>:</p> <pre><code>ln -sf \"$HOME/go/bin/RBACLens\" \"$HOME/go/bin/rbaclens\"\n</code></pre> <pre><code>git clone https://github.com/flushthemoney/RBACLens.git\ncd RBACLens\ngo build -o rbaclens main.go\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>RBACLens provides the following commands:</p> <ul> <li>Fetch RBAC Resources: <code>rbaclens fetch</code> See details \u2192</li> <li>Audit RBAC Resources: <code>rbaclens ruleaudit</code> See details \u2192</li> </ul> <p>For advanced usage and all options, see the project README.</p>"},{"location":"#documentation","title":"Documentation","text":"<ul> <li>Fetch Command</li> <li>Rule Audit Command</li> <li>Project README</li> </ul> <p>Info</p> <p>You can contribute or report issues on GitHub</p>"},{"location":"fetch/","title":"Fetch Command","text":"<p>Info</p> <p>The <code>fetch</code> command retrieves Kubernetes RBAC resources for analysis or auditing. You can fetch resources live from a cluster and optionally save them to a JSON file for offline analysis.</p>"},{"location":"fetch/#usage","title":"Usage","text":"<pre><code>rbaclens fetch [flags]\n</code></pre> <p>Flags:</p> <ul> <li><code>--kubeconfig</code>: Path to the kubeconfig file (optional)</li> <li><code>--namespace</code>: Comma-separated list of namespaces to fetch (optional)</li> <li><code>--json-out</code>: Output the RBAC resources to a JSON file</li> </ul>"},{"location":"fetch/#examples","title":"Examples","text":"<ul> <li>Fetch all RBAC resources from the cluster and output to JSON:</li> </ul> <pre><code>rbaclens fetch --json-out\n</code></pre> <ul> <li>Fetch RBAC resources from a specific namespace:</li> </ul> <pre><code>rbaclens fetch --namespace=my-namespace --json-out\n</code></pre> <ul> <li>Fetch RBAC resources from multiple namespaces:</li> </ul> <pre><code>rbaclens fetch --namespace=my-namespace,another-namespace --json-out\n</code></pre> <ul> <li>Use a specific kubeconfig file:</li> </ul> <pre><code>rbaclens fetch --kubeconfig=/path/to/kubeconfig --json-out\n</code></pre>"},{"location":"fetch/#how-it-works","title":"How It Works","text":"<ol> <li>Connects to the Kubernetes cluster using the provided kubeconfig (or default if not specified).</li> <li>Fetches RBAC resources from the specified namespaces (or all if not specified).</li> <li>If <code>--json-out</code> is set, the resources are saved to <code>rbac_resources.json</code>.</li> <li>Otherwise, resources are not saved to disk.</li> </ol>"},{"location":"fetch/#output","title":"Output","text":"<ul> <li>JSON Output: The RBAC resources are saved as <code>rbac_resources.json</code>.</li> <li>Console Output: A success message is printed with the output file name.</li> </ul> <p>Note</p> <p>See the main README for more details on installation and usage.</p>"},{"location":"ruleaudit/","title":"Rule Audit Command","text":"<p>Info</p> <p>The <code>ruleaudit</code> command audits Kubernetes RBAC resources for risky configurations using built-in rules. You can audit resources live from a cluster or from a previously saved JSON file.</p> <p>This tool is designed to focus on actual security issues by filtering out legitimate system components, making the results actually meaningful.</p>"},{"location":"ruleaudit/#usage","title":"Usage","text":"<pre><code>rbaclens ruleaudit [flags]\n</code></pre> <p>Flags:</p> <ul> <li><code>--kubeconfig</code>: Path to the kubeconfig file (optional)</li> <li><code>--namespace</code>: Comma-separated list of namespaces to audit (optional)</li> <li><code>--json-out</code>: Output the audit report to a JSON file (optional)</li> <li><code>--input</code>: Path to a previously saved RBAC resources JSON file to audit (optional)</li> <li><code>--include-system</code>: Include system components in audit results (may produce many findings, disabled by default)</li> </ul>"},{"location":"ruleaudit/#examples","title":"Examples","text":"<ul> <li>Audit live cluster RBAC resources with clean output:</li> </ul> <pre><code>rbaclens ruleaudit\n</code></pre> <ul> <li>Audit live cluster RBAC resources and output to JSON:</li> </ul> <pre><code>rbaclens ruleaudit --json-out\n</code></pre> <ul> <li>Audit RBAC resources from a specific namespace:</li> </ul> <pre><code>rbaclens ruleaudit --namespace=my-namespace\n</code></pre> <ul> <li>Audit from a previously saved RBAC resources file:</li> </ul> <pre><code>rbaclens ruleaudit --input=rbac_resources.json\n</code></pre> <ul> <li>Include system components in the audit (comprehensive scan):</li> </ul> <pre><code>rbaclens ruleaudit --include-system\n</code></pre>"},{"location":"ruleaudit/#smart-filtering","title":"Smart Filtering","text":"<p>By default, the audit tool filters out system components to focus on user-created or potentially problematic configurations:</p> <p>What Gets Filtered:</p> <ul> <li>System Roles: All roles prefixed with <code>system:</code> (e.g., <code>system:controller:_</code>, <code>system:kube-_</code>)</li> <li>Default Kubernetes Roles: <code>cluster-admin</code>, <code>admin</code>, <code>edit</code>, <code>view</code></li> <li>System Namespaces: <code>kube-system</code>, <code>kube-public</code>, <code>kube-node-lease</code>, <code>default</code></li> <li>Legitimate System Bindings: Known-good bindings like <code>system:public-info-viewer</code></li> <li>Service Account Bindings: Legitimate system service account bindings</li> </ul> <p>What Gets Detected:</p> <ul> <li>Custom roles with overly broad permissions (<code>*</code> verbs or resources)</li> <li>Dangerous bindings to <code>system:unauthenticated</code> users</li> <li>Risky custom permissions on secrets, workloads, or persistent volumes</li> <li>Custom roles with privilege escalation potential</li> </ul>"},{"location":"ruleaudit/#risk-levels","title":"Risk Levels","text":"<p>The audit categorizes findings into three risk levels:</p> <ul> <li> High Risk: Wildcard permissions (<code>*</code>), bindings to unauthenticated users</li> <li> Medium Risk: Access to secrets, workload creation, privilege escalation verbs</li> <li> Low Risk: Broad list/watch permissions, configuration access</li> </ul>"},{"location":"ruleaudit/#how-it-works","title":"How It Works","text":"<ol> <li>Resource Collection:</li> <li>If <code>--input</code> is provided, reads RBAC resources from the specified JSON file</li> <li>Otherwise, fetches live RBAC resources from the cluster using kubeconfig</li> <li>Smart Analysis:</li> <li>Applies intelligent filtering to focus on user-created resources</li> <li>Evaluates each rule against security best practices</li> <li>Categorizes findings by risk level</li> <li>Output Generation:</li> <li>Provides comprehensive statistics about the audit</li> <li>Shows detailed findings with explanations</li> <li>Offers clean, actionable results</li> </ol>"},{"location":"ruleaudit/#output-formats","title":"Output Formats","text":""},{"location":"ruleaudit/#cli-output-default","title":"CLI Output (Default)","text":"<p>The console output provides a clean, formatted report of the findings:</p> <pre><code>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502                 \ud83d\udee1\ufe0f  RBAC Security Audit Report                \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n\ud83d\udcca Audit Summary:\n   \ud83d\udd17 ClusterRoles:        68\n   \ud83d\udd17 Roles:               12\n   \ud83d\udd17 ClusterRoleBindings: 56\n   \ud83d\udd17 RoleBindings:        12\n   \u2699\ufe0f System resources skipped: 146\n\n\u2705 No security issues found!\n   All RBAC configurations appear to follow security best practices.\n   (Skipped 146 system components - use --include-system to see them)\n</code></pre> <p>If issues are found:</p> <pre><code>\u26a0\ufe0f  Security Issues Found: 3\n   \ud83d\udd34 High Risk:   1\n   \ud83d\udfe1 Medium Risk: 2\n\n\ud83d\udccb Detailed Findings:\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n1. [\ud83d\udd34 High] ClusterRole/dangerous-role\n   \u2514\u2500 ClusterRole grants '*' verbs or resources, which is highly privileged.\n\n2. [\ud83d\udfe1 Medium] ClusterRole/secrets-reader\n   \u2514\u2500 Rule grants get/list/watch on secrets, which can leak sensitive data.\n</code></pre>"},{"location":"ruleaudit/#json-output","title":"JSON Output","text":"<p>When using <code>--json-out</code>, the audit report is saved to <code>rbac_audit_report.json</code> with comprehensive metadata:</p> <pre><code>{\n  \"metadata\": {\n    \"clusterName\": \"my-cluster\",\n    \"timestamp\": \"2025-08-21T12:00:00Z\"\n  },\n  \"findings\": [...],\n  \"summary\": {\n    \"totalClusterRoles\": 68,\n    \"totalRoles\": 12,\n    \"totalClusterRoleBindings\": 56,\n    \"totalRoleBindings\": 12,\n    \"totalFindings\": 0,\n    \"highRiskFindings\": 0,\n    \"mediumRiskFindings\": 0,\n    \"lowRiskFindings\": 0,\n    \"systemResourcesSkipped\": 146\n  }\n}\n</code></pre>"},{"location":"ruleaudit/#best-practices","title":"Best Practices","text":"<ol> <li>Regular Auditing: Run the audit regularly to catch configuration drift</li> <li>Start Simple: Use the default filtering to focus on actionable issues</li> <li>Comprehensive Review: Use <code>--include-system</code> occasionally for full cluster assessment</li> <li>Track Changes: Save audit reports over time to track security improvements</li> <li>Focus on High/Medium: Prioritize fixing high and medium risk findings first</li> </ol> <p>Note</p> <p>See the main README for more details on installation and usage.</p>"}]}